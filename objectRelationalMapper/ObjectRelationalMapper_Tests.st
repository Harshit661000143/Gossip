Object subclass: #Test	instanceVariableNames: 'db'	classVariableNames: 'constructorvalue'	poolDictionaries: ''	category: 'ObjectRelationalMapper_Tests'!!Test commentStamp: '<historical>' prior: 0!!!Test methodsFor: 'as yet unclassified' stamp: 'hd 8/1/2014 19:45'!selectQuery |emp1   session employees  |"This method is for taking values for each column and create table only if doesn't exists. If it exists it simply inserts the values, else creates table and insert values"	session:= ORMSession new.	session createDatabase: db.	emp1 := Employee new. 	emp1 Where: 'Salary' operator:'>' value:50.	emp1 add:' AND' Where: 'EmployeeID' operator:'=' value:22.	 	employees := session selectObjectAttributes: emp1.	"Though both the employee has salary more than 24, but only second employee's salary is displayed. By using association of columns (salary and ID)"	Transcript show: 'employees values: '.	employees class asString = Employee asString 		ifTrue: [Transcript show: employees values;cr. ]		ifFalse: [employees do: [:each | Transcript show: each values; cr]].	Transcript cr.					! !!Test methodsFor: 'as yet unclassified' stamp: 'hd 8/1/2014 18:25'!insertQuery |emp1   session emp2 |"This method is for taking values for each column and create table only if doesn't exists. If it exists it simply inserts the values, else creates table and insert values"	session:= ORMSession new.	session createDatabase: db.	emp1 := Employee new.	 	emp1 employee_ID: 45.	emp1 last_name:  '"jhaddu"'.	emp1 middle_name: '"ki"'.	emp1 first_name: '"losaa"'.	emp1 date_Of_Birth: '"31 December 1980"'. 	emp1 salariedAt: 20.	session getObjectValues: emp1.	session insertObjectAttributes: emp1.	emp2 := Employee new.	emp2 employee_ID: 22.	emp2 last_name:  '"jhawddu"'.	emp2 middle_name: '"1ki"'.	emp2 first_name: '"ASTBlockClosure saa"'.	emp2 date_Of_Birth: '"31 Descember 1980"'. 	emp2 salariedAt: 100.		session getObjectValues: emp2.	session insertObjectAttributes: emp2.						! !!Test methodsFor: 'as yet unclassified' stamp: 'jack 7/31/2014 20:28'!updateQuery |emp1   session|"Now if we want to update a row, we first give the updated data for those particular columns which requires update."	session:= ORMSession new.	session createDatabase: db.	emp1 := Employee new.	"Like here we are updating only salary but you can update as many columns of single row " 	emp1 salariedAt: 24.	session getObjectValues: emp1.	Transcript show: emp1 values;cr;cr.	"Now this is the where clause where EmployeeID=1, it should update only that guy's salary"	emp1 Where:'EmployeeID' operator:'=' value:1.	session updateObjectAttributes: emp1				! !!Test methodsFor: 'as yet unclassified' stamp: 'jack 7/31/2014 20:28'!createQuerywithoutprimarykey |   session|"This method is for taking values for each column and create table only if doesn't exists. If it exists it simply inserts the values, else creates table and insert values"	session:= ORMSession new.	session createDatabase: db.	Employee setprimarykey: nil.	"Transcript show: Employee1 primarykey;cr."	session createObjectAttributes:  Employee new.						! !!Test methodsFor: 'as yet unclassified' stamp: 'hd 8/1/2014 01:12'!initialize	db := '/Users/harshitdokania/dicg.db'.		! !!Test methodsFor: 'as yet unclassified' stamp: 'hd 8/1/2014 18:31'!updateTest |session employee  |"This method is for taking values for each column and create table only if doesn't exists. If it exists it simply inserts the values, else creates table and insert values"	session:= ORMSession new.	session createDatabase: db.		Employee setprimarykey:#EmployeeID.	employee := Employee new.	employee Where: 'EmployeeID' operator:'=' value:22. 	employee := session selectObjectAttributes: employee.	Transcript show: 'employee values: '; show: employee values; cr; cr.		employee salariedAt: 1000.	session save:employee.		! !!Test methodsFor: 'as yet unclassified' stamp: 'hd 8/1/2014 19:52'!foreignKeyTest	| session   team |	session := ORMSession new.	session createDatabase: db.	Employee setprimarykey: #EmployeeID.	"session createObjectAttributes:  Employee new."	Team setprimarykey: #TeamID.	Team setForeignKey: #ManagerID pointingTo: (Employee tableName) primaryKey: #EmployeeID.	team:= Team new.	"Transcript show: team foreignKeyDictionaryReturn;cr. "	"session createObjectAttributes:  team."	team teamID: 10.	team teamname:'''phado'''.	team managerID: 5.	"Transcript show: team;cr."	session getObjectValues: team.	session insertObjectAttributes: team.												! !!Test methodsFor: 'as yet unclassified' stamp: 'jack 7/31/2014 20:28'!createQuerywithprimarykey |   session|"This method is for taking values for each column and create table only if doesn't exists. If it exists it simply inserts the values, else creates table and insert values"	session:= ORMSession new.	session createDatabase: db.	Employee setprimarykey: #EmployeeID.	"Transcript show: Employee1 primarykey;cr."	session createObjectAttributes:  Employee new.						! !